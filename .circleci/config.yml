version: 2
jobs:
  run_tests:
    working_directory: ~
    docker:
      - image: circleci/python:3.6.5-jessie-node
        environment:
          DATABASE_URL: postgresql://root@localhost/test?sslmode=disable
      - image: circleci/postgres:10-alpine-ram
        environment:
          POSTGRES_USER: root
          POSTGRES_DB: test
    steps:
      - checkout
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "requirements/local.txt" }}
          - v1-dependencies-
      - run:
          name: Install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install -r requirements/local.txt
            yarn install
      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements/local.txt" }}
      - run:
          name: Run python tests
          command: |
            . venv/bin/activate
            coverage run manage.py test
      - run:
          name: Run python coverage
          command: |
            . venv/bin/activate
            coverage report
      - run:
          name: Run javascript tests
          command: |
            yarn test
      - run:
          name: Run javascript coverage
          command: |
            yarn coverage
      - store_test_results:
          path: test-results
      - store_artifacts:
          path: test-reports
          destination: test-reports

  register_cantaloupe_image:
    docker:
      - image: docker:git
    working_directory: ~
    steps:
      - setup_remote_docker
      - checkout
      - run:
          name: Build & Push Image
          command: |
            docker build -t cidr/histonets_cantaloupe:latest --build-arg CANTALOUPE_BRANCH=$CANTALOUPE_BRANCH --build-arg CANTALOUPE_VERSION=$CANTALOUPE_VERSION --build-arg BASE_URI=$CANTALOUPE_BASE_URI --build-arg ADMIN_ENABLED=$CANTALOUPE_ADMIN_ENABLED --build-arg ADMIN_PASSWORD=$CANTALOUPE_ADMIN_PASSWORD --build-arg AWS_ENDPOINT=$CANTALOUPE_AWS_ENDPOINT --build-arg AWS_BUCKET_NAME=$CANTALOUPE_AWS_BUCKET_NAME --build-arg AWS_BUCKET_REGION=$CANTALOUPE_AWS_BUCKET_REGION -f compose/production/cantaloupe/Dockerfile .
            docker login -u $DOCKER_USER -p $DOCKER_PASS
            docker push cidr/histonets_cantaloupe:latest

  register_image:
    docker:
      - image: circleci/python:3.6.5-jessie-node
        environment:
          WEBPACK_MODE: production
    working_directory: ~
    steps:
      - setup_remote_docker
      - checkout
      - run:
          name: Install & Build Yarn
          command: |
            yarn install
            yarn build
      - run:
          name: Build Image & Register Task
          command: |
            docker build -t cidr/histonets_django:latest -f compose/production/django/Dockerfile .
            docker login -u $DOCKER_USER -p $DOCKER_PASS
            docker push cidr/histonets_django:latest

  deploy_to_dev:
    docker:
      - image: circleci/python:3.6.5-jessie-node
    working_directory: ~
    steps:
      - run:
          name: Install AWS CLI
          command: |
            sudo apt-get install -y python-pip libyaml-dev python-dev jq
            sudo pip install awscli
      - checkout
      - run:
          name: Configure AWS CLI (dev)
          command: |
            aws configure set aws_access_key_id $DEV_AWS_KEY
            aws configure set aws_secret_access_key $DEV_AWS_SECRET
            aws configure set region us-west-2
            aws configure set default.output json
            aws configure list  # Get confirmation it worked in your logs
      - run:
          name: DB Migrate & Update Service (dev)
          command: |
            task_arn=$(aws ecs list-task-definitions --family-prefix histonets --sort DESC --max-items 1 | jq --raw-output --exit-status '.taskDefinitionArns[]')
            cluster_arn=$(aws ecs list-clusters | jq --raw-output --exit-status '.clusterArns[] | select(contains("cidr"))')
            vpc_id=$(aws ec2 describe-vpcs --filters "Name=tag:Environment,Values=dev" | jq --raw-output --exit-status '.Vpcs[].VpcId')
            subnet_id=$(aws ec2 describe-subnets --filters "Name=vpc-id,Values=$vpc_id" "Name=tag:Name,Values=dev-private-us-west-2a" | jq --raw-output --exit-status '.Subnets[].SubnetId')
            group_id=$(aws ec2 describe-security-groups --filters "Name=vpc-id,Values=$vpc_id" "Name=group-name,Values=histonets-dev-ecs-service-sg" | jq --raw-output --exit-status '.SecurityGroups[].GroupId')
            aws ecs run-task --overrides '{ "containerOverrides": [{ "name": "histonets", "command": [ "python", "manage.py", "post_deploy", "--reset" ]}]}' --task-definition "$task_arn" --cluster "$cluster_arn" --network-configuration '{ "awsvpcConfiguration": { "subnets": [ "'"$subnet_id"'" ], "securityGroups": [ "'"$group_id"'" ], "assignPublicIp": "DISABLED" }}' --launch-type FARGATE
            aws ecs update-service --cluster "$cluster_arn" --service histonets --task-definition "$task_arn"

workflows:
  version: 2
  run_tests:
    jobs:
      - run_tests:
          filters:
            branches:
              ignore:
                - devel
                - master

  deploy_devel_to_dev:
    jobs:
      - run_tests:
          filters:
            branches:
              only: devel
            tags:
              ignore: /.*/
      - register_cantaloupe_image:
          filters:
            branches:
              only: devel
            tags:
              ignore: /.*/
      - register_image:
          requires:
            - run_tests
          filters:
            branches:
              only: devel
            tags:
              ignore: /.*/
      - deploy_to_dev:
          requires:
            - register_image
            - register_cantaloupe_image
          filters:
            branches:
              only: devel
            tags:
              ignore: /.*/
